name: Deploy Next.js Frontend

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main # triggers workflow automatically on push to main

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Create frontend .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" \
            -t ${{ secrets.DOCKER_USERNAME }}/vakilsahab-frontend:latest .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/vakilsahab-frontend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Create .env on EC2
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          "mkdir -p ~/vakilsahab/frontend && echo \"$ENV_FILE\" > ~/vakilsahab/frontend/.env"

      - name: Install Docker on EC2 (if not installed)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              # Add current user to docker group to avoid using sudo for docker commands
              sudo usermod -aG docker $USER || true
              echo "Docker installed."
            else
              echo "Docker already installed."
            fi
          EOF

      - name: Docker Login on EC2
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          "echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin"

      - name: Pull and Run Frontend on EC2
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            docker pull $DOCKER_USERNAME/vakilsahab-frontend:latest

            # Stop and remove existing container if running
            if [ \$(docker ps -q -f name=vakilsahab-frontend) ]; then
              docker stop vakilsahab-frontend
              docker rm vakilsahab-frontend
            fi

            # Run container with environment file, ports, restart policy
            docker run -d --name vakilsahab-frontend \
              --env-file ~/vakilsahab/frontend/.env \
              -p 3000:3000 \
              --restart unless-stopped \
              $DOCKER_USERNAME/vakilsahab-frontend:latest
          EOF
